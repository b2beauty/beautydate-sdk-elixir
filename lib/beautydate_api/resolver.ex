defmodule BeautyDateAPI.Resolver do
  @moduledoc """
  It transforms the list of endpoints generated by the "pipe operator
  query syntax" into a valid URI set of parameters for the Beauty
  Date JSON API.
  """

  @doc ~S"""
  Works over different types of input data to return the Beauty Date
  JSON API endpoint URI.

  ## Examples

      iex> BeautyDateAPI.Resolver.resolve(["businesses"])
      "businesses"

      iex> BeautyDateAPI.Resolver.resolve(["businesses", 4])
      "businesses/4?"

      iex> BeautyDateAPI.Resolver.resolve(["businesses", "fields[businesses]=name"])
      "businesses?fields[businesses]=name&"

      iex> BeautyDateAPI.Resolver.resolve(["businesses", 4, "fields[businesses]=name"])
      "businesses/4?fields[businesses]=name"
  """
  @spec resolve([...]) :: String.t
  @spec resolve(integer) :: String.t
  @spec resolve(String.t) :: String.t
  def resolve([entity]), do: entity

  def resolve([entity | params]) when length(params) == 1 do
    entity <> resolve(hd(params))
  end

  def resolve([entity | params]) do
    [entity, resolve(hd(params)), tl(params) |> Enum.join("&")]
    |> Enum.join()
  end

  def resolve(param) when is_integer(param), do: "/#{param}?"

  def resolve(param), do: "?#{param}&"
end
